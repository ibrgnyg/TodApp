#pragma checksum "C:\Users\ibr günay\source\repos\TodApp\Views\Todo\MyTodo.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fe09d927e5a528ff4bab9e1cbc38bfbc58b547f6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Todo_MyTodo), @"mvc.1.0.view", @"/Views/Todo/MyTodo.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Todo/MyTodo.cshtml", typeof(AspNetCore.Views_Todo_MyTodo))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\ibr günay\source\repos\TodApp\Views\_ViewImports.cshtml"
using TodApp;

#line default
#line hidden
#line 2 "C:\Users\ibr günay\source\repos\TodApp\Views\_ViewImports.cshtml"
using TodApp.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fe09d927e5a528ff4bab9e1cbc38bfbc58b547f6", @"/Views/Todo/MyTodo.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"47dc4789b44f13a26474e8376fc389eeeadd36bf", @"/Views/_ViewImports.cshtml")]
    public class Views_Todo_MyTodo : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "C:\Users\ibr günay\source\repos\TodApp\Views\Todo\MyTodo.cshtml"
  
	ViewData["Title"] = "MyTodo";

#line default
#line hidden
            BeginContext(41, 2908, true);
            WriteLiteral(@"
<div class=""mydiv"" id=""ToggApp"">
	<div class=""row"">
		<div class=""col-md-12"">
			<div class=""main-todo-input-wrap"">
				<div class=""main-todo-input fl-wrap"">
					<div class=""main-todo-input-item""> <input type=""text"" v-model=""TodoName"" placeholder=""Bugün ne yapacaksın?""> </div> <button class=""add-items main-search-button"" v-on:click=""AddTodo"">Ekle</button>
				</div>
			</div>
		</div>
	</div>
	<hr style=""color:black;border-style:solid;border-width:1px;"" />

	<div class=""row d-flex justify-content-center container"">
		<div class=""col-md-8"">
			<div class=""card-hover-shadow-2x mb-3 card"" v-if=""!BtnToggle"">
				<div class=""card-header-tab card-header"">

					<div class=""col-10"">
						<div class=""card-header-title font-size-lg text-capitalize font-weight-normal""><i class=""fa fa-tasks""></i>&nbsp;Tüm yapılacaklar</div>
					</div>
					<div class=""col-4"">
						<div class=""dropdown"">
							<button class=""btn btn-light dropdown-toggle"" type=""button"" id=""dropdownMenu2"" data-toggle=""dropdown");
            WriteLiteral(@""" aria-haspopup=""true"" aria-expanded=""false"">
								Sırala
							</button>
							<div class=""dropdown-menu"" aria-labelledby=""dropdownMenu2"">

								<button class=""dropdown-item"" type=""button"" v-on:click=""Afilter"">A-Z Sırala</button>
								<button class=""dropdown-item"" type=""button"" v-on:click=""ZFilter"">Z-A Sırala</button>
								<button class=""dropdown-item"" type=""button"" v-on:click=""Comp"">Tamamlandı</button>
								<button class=""dropdown-item"" type=""button"" v-on:click=""List"">Sıfırla</button>
							

							</div>
						</div>
					</div>

				</div>

				<div class=""text-center"" v-if=""!todoResult.length"">
					<div class=""cardd"">
						<div class=""card__image loading""></div>

					</div>
				</div>


				<div class=""scroll-area-sm"" v-else=""todoResult"">

					<div style=""position: static;"" class=""ps ps--active-y"">
						<div class=""ps-content"">
							<ul class="" list-group list-group-flush"">
								<li class=""list-group-item""  v-for=""(todoResult,index) in todoResult");
            WriteLiteral(@""">
									<div class=""todo-indicator bg-warning""></div>
									<div class=""widget-content p-0"">
										<div class=""widget-content-wrapper"">

											<div>
												<div  class=""col-10"" v-if=""todoResult.done == true"">
													<span class=""badge badge-success"">tamalandı</span>
												</div>
												<div class=""widget-content-left mr-2"" v-else=""todoResult.done"">
													<div class=""custom-checkbox custom-control"">
														<input class=""form-check-input"" type=""checkbox""  v-on:click=""Chancge(todoResult,index)"" v-model=""donebox"">
													</div>
												</div>
											</div>
											
										
											<div class=""widget-content-left"">
												<div class=""widget-subheading""><h5>{{todoResult.todoName}}</h5></div>
											</div>
											<div class=""widget-content-right"">
");
            EndContext();
            BeginContext(3117, 2593, true);
            WriteLiteral(@"												<button class=""border-0 btn-transition btn btn-outline-danger"" v-on:click=""RemoveTodo(todoResult,index)""> <i class=""fa fa-trash""></i> </button>
											</div>

										</div>

									</div>

								</li>


							</ul>

						</div>

					</div>

				</div>
				

				<br />
				<br />
			</div>

			<div class=""text-center"">
				<button class=""btn"" type=""button"" v-on:click=""BtnToggle = ! BtnToggle"">	<i style='font-size:34px;color:orangered' class='fas'>&#xf106;</i> 	<i style='font-size:34px;color:black' class='fas'>&#xf107;</i></button>
			</div>


		</div>

	</div>
	

</div>




<script>
	App = new Vue({
		el: ""#ToggApp"",
		data: {
			BtnToggle: false,
			todoResult: [],
			TodoName: """",
			donebox: false,
		},

		methods: {

			Chancge: function (data) {
				var vm = this;
				var update = {
					id: data.id,
					donebox: data.donebox = true,
				}
				$.ajax({
					url: ""/todo/update"",
					method: ""PUT"",
					data: update,
			");
            WriteLiteral(@"	})
					.done(function (data) {
						vm.todoResult.splice(0, 0, data);
					})	
			},

			AddTodo: function () {

				var vm = this;
				if (vm.TodoName == """") {
					return;
				}
				var newTodo = {
					todoname: vm.TodoName
					
				}
				$.ajax({ url: ""/todo/createtodo"", data: newTodo, method: ""POST"" })
					.done(function (data) {
						vm.todoResult.splice(0, 0, data);
					})
				this.TodoName = """";
			},

			List: function () {
				var vm = this;
				$.ajax({
					url: ""/todo/ListTodo"",
					method: ""GET"",
				})
					.done(function (data) {
						vm.todoResult = data;

					})
			},

			RemoveTodo: function (data) {
				var vm = this;
				var remove = {
					id: data.id,
				}

				$.ajax({ url: ""/todo/delete"", data: remove, method: ""DELETE"" })
					.done(function (data) {
						vm.todoResult.splice(data, 1);

					});


			},

			Afilter() {
				var vm = this;
				$.ajax({
					url: ""/todo/a"",
					method: ""GET"",
				})
					.done(function ");
            WriteLiteral(@"(data) {

						vm.todoResult = data;

					})
			},

			ZFilter() {

				var vm = this;
				$.ajax({
					url: ""/todo/z"",
					method: ""GET"",
				})
					.done(function (data) {
						vm.todoResult = data;
					})
			},

			Comp() {

				var vm = this;
				$.ajax({
					url: ""/todo/CompList"",
					method: ""GET"",
				})
					.done(function (data) {
						vm.todoResult = data;
					})
			},

		},

		created: function () {
			setTimeout(() => {
				this.List();
			}, 1500);


		},


	});
</script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
